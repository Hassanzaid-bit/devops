pipeline {
    agent any 
    stages {
        stage('Get Last Commit Details') {
            steps {
                script{
                    List<String> changes = getChangedFilesList()
                    println ("Changed file list: " + changes)

                    String gitCommitId = getGitcommitID()
                    println("GIT CommitID: " + gitCommitID)

                    String gitCommitAuthorName = getAuthorName()
                    println("GIT CommitAuthorName: " + gitCommitAuthorName)

                    String gitCommitMessage = getCommitMessage()
                    println("GIT CommitMessage: " + gitCommitMessage)
                }
            }
        }
        stage('Static Analysis') {
            steps {
                echo 'Run the static analysis to the code' 
            }
        }
        stage('Compile') {
            steps {
                echo 'Compile the source code' 
            }
        }
        stage('Security Check') {
            steps {
                echo 'Run the security check against the application' 
            }
        }
        stage('Run Unit Tests') {
            steps {
                echo 'Run unit tests from the source code' 
            }
        }
        stage('Run Integration Tests') {
            steps {
                echo 'Run only crucial integration tests from the source code' 
            }
        }
        stage('Publish Artifacts') {
            steps {
                echo 'Save the assemblies generated from the compilation' 
            }
        }
    }
    
    post {
        success {
            // Send Slack notification on successful build
            slackSend (
                color: '#36a64f', // Set a color for your message
                message: "Build successful! Commit by ${currentBuild.getBuildCauses()[0].userId}.\n\nCommit Message: ${currentBuild.getBuildCauses()[0].shortDescription}"
            )
        }
        
        failure {
            // Send Slack notification on build failure
            slackSend (
                color: '#FF5733', // Set a different color for failure messages
                message: "Build failed! Commit by ${currentBuild.getBuildCauses()[0].userId}.\n\nCommit Message: ${currentBuild.getBuildCauses()[0].shortDescription}"
            )
        }
    }
    // post {
    //     success {
    //         // Capture the actual commit message from the Git repository
    //         script {
    //             def gitCommitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
    //             slackSend (
    //                 color: '#36a64f',
    //                 message: "Build successful! Commit message: ${gitCommitMessage}"
    //             )
    //         }
    //     }
        
    //     failure {
    //         // Capture the actual commit message from the Git repository
    //         script {
    //             def gitCommitMessage = sh(returnStdout: true, script: 'git log -1 --pretty=%B').trim()
    //             slackSend (
    //                 color: '#FF5733',
    //                 message: "Build failed! Commit message: ${gitCommitMessage}"
    //             )
    //         }
    //     }
    // }

}

@NonCPS
List<String> getChangedFilesList(){
    def changedFiles = []
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            changedFiles.addAll(entry.affectedPaths)
        }
    }
    return changedFiles
}

@NonCPS
String getGitcommitID(){
    gitCommitID = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            gitCommitID = entry.commitId
        }
    }
    return gitCommitID
}

@NonCPS
String getAuthorName(){
    gitAuthorName = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            gitAuthorName = entry.authorName
        }
    }
    return gitAuthorName
}

@NonCPS
String getCommitMessage(){
    commitMessage = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            commitMessage = entry.msg
        }
    }
    return commitMessage
}
