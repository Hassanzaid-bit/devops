pipeline {
    agent any 
    stages {
        stage('Get Last Commit Details') {
            steps {
                script{
                    List<String> changes = getChangedFilesList()
                    println ("Changed file list: " + changes)

                    String gitCommitId = getGitcommitID()
                    println("GIT CommitID: " + gitCommitID)

                    String gitCommitAuthorName = getAuthorName()
                    println("GIT CommitAuthorName: " + gitCommitAuthorName)

                    String gitCommitMessage = getCommitMessage()
                    println("GIT CommitMessage: " + gitCommitMessage)
                }
            }
        }                     
        stage('Run Unit Tests') {
            steps {
                echo 'Run unit tests from the source code' 
            }
        }
        stage('Run Integration Tests') {
            steps {
                echo 'Run only crucial integration tests from the source code' 
            }
        }
        stage('Publish Artifacts') {
            steps {
                echo 'Save the assemblies generated from the compilation' 
            }
        }
        stage('Display Code Changes') {
            steps {
                // Use the changeset step to display code changes
                changeset([format: 'HTML']) {
                    // Display code changes in the HTML format
                    echo "Code Changes:<br>${CHANGES}"
                }
            }
        }
    }
    
    post {
        success {
            // Send Slack notification on successful build
            slackSend (
                color: '#36a64f', // Set a color for your message               
                message: "Build successful!\n\n Commit by ${getAuthorName()}.\n\nCommit Message: ${getCommitMessage()}"
            )
        }
        
        failure {
            // Send Slack notification on build failure
            slackSend (
                color: '#FF5733', // Set a different color for failure messages
                message: "Build failed!\n\n Commit by ${getAuthorName()}.\n\nCommit Message: ${getCommitMessage()}"
            )
        }
    }
}

@NonCPS
List<String> getChangedFilesList(){
    def changedFiles = []
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            changedFiles.addAll(entry.affectedPaths)
        }
    }
    return changedFiles
}

@NonCPS
String getGitcommitID(){
    gitCommitID = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            gitCommitID = entry.commitId
        }
    }
    return gitCommitID
}

@NonCPS
String getAuthorName(){
    gitAuthorName = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            gitAuthorName = entry.authorName
        }
    }
    return gitAuthorName
}

@NonCPS
String getCommitMessage(){
    commitMessage = " "
    for ( changeLogSet in currentBuild.changeSets){
        for (entry in changeLogSet.getItems()){
            commitMessage = entry.msg
        }
    }
    return commitMessage
}
